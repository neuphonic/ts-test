import Head from "next/head";
import Link from "next/link";
import { useEffect, useMemo } from "react";

import { api } from "~/utils/api";

type uuid = string;

const wordLevelFeatures = [
  "wl_emphasis",
  "wl_pitch",
  "wl_energy",
  "wl_speaking_rate",
] as const;

type Word = {
  start: number;
  end: number;
  text: string;
};

type Sentence = {
  idx: number;
  start: number;
  end: number;
  speaker: string;
  words: Word[];
};

type Transcript = {
  audio_id: uuid;
  language: string;
  transcript: Sentence[];
};

type WordLevelFeature = typeof wordLevelFeatures[number];

type FeatureType = WordLevelFeature | "transcript" | "file_path";

type FeatureReturnType<T> = T extends "transcript"
  ? Transcript
  : T extends WordLevelFeature
  ? number[][]
  : T extends "file_path"
  ? string
  : never;

export async function getFeature<T extends FeatureType>(
  featureType: T,
): Promise<FeatureReturnType<T>> {
  const feature = {};

  if (featureType === "transcript") {
      const output = {} as Transcript;

      // ...

      return output as FeatureReturnType<T>;
  }

  // ...

  return feature as FeatureReturnType<T>;
}

export default function Home() {
  const hello = api.post.hello.useQuery({ text: "from tRPC" });

  const bob = useMemo(() => `hello ${hello.data?.greeting}!`, [hello.data]);
  console.log(bob)

  useEffect(() => {
    console.log("Hello from Neuphonic!");
  }, []);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <p className="text-2xl text-white">
            {hello.data ? hello.data.greeting : "Loading tRPC query..."}
          </p>
        </div>
      </main>
    </>
  );
}
